package com.example.green_deli.presentation.fragments.generator

import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import com.example.green_deli.Common
import com.example.green_deli.Common.UNKNOWN_ERROR
import com.example.green_deli.common.ApiTag
import com.example.green_deli.domain.pojo.response.ApiCategory
import com.example.green_deli.domain.pojo.response.ApiFood
import com.example.green_deli.domain.usecase.GenerateFoodUseCase
import com.example.green_deli.domain.usecase.GetCategoriesUseCase
import com.example.green_deli.domain.usecase.GetFoodByCategoryUseCase
import com.example.green_deli.domain.usecase.GetTagsUseCase
import kotlinx.android.synthetic.main.fragment_profile.view.*

class GeneratorViewModel: ViewModel() {
    private val generateFoodUseCase = GenerateFoodUseCase()
    private val getTagsUseCase = GetTagsUseCase()
    private val getCategoriesUseCase = GetCategoriesUseCase()

    val error by lazy { MutableLiveData<String>() }
    val generated by lazy { MutableLiveData<List<ApiFood>>() }
    val tags by lazy { MutableLiveData<List<ApiTag>>() }
    val categories by lazy { MutableLiveData<List<ApiCategory>>() }
    val selectedCategories by lazy { MutableLiveData<MutableList<ApiCategory>>().apply {
            value = mutableListOf()
        }
    }
    val selectedTags by lazy { MutableLiveData<MutableList<ApiTag>>().apply {
            value = mutableListOf()
        }
    }

    fun notifyCategoryAdded(category: ApiCategory) {
        selectedCategories.value!!.let {
            selectedCategories.value = it.apply {
                add(category)
            }
        }
    }

    fun notifyTagAdded(tag: ApiTag) {
        selectedTags.value!!.let {
            selectedTags.value = it.apply {
                add(tag)
            }
        }
    }

    fun notifyDataReset() {
        selectedTags.value = mutableListOf()
        selectedCategories.value = mutableListOf()
    }

    fun generateFood() {
        generateFoodUseCase.apply {
            this.categories = selectedCategories.value!!
            this.tags = selectedTags.value!!
        }.execute {
            onFail { error.value = Common.GENERATE_ERROR }
            onComplete {
                generated.value = it
            }
        }
    }

    fun fetchTags() {
        getTagsUseCase.execute {
            onFail { error.value = UNKNOWN_ERROR }
            onComplete {
                tags.value = it
            }
        }
    }

    fun fetchCategories() {
        getCategoriesUseCase.execute {
            onFail {
                error.value = UNKNOWN_ERROR
            }
            onComplete {
                categories.value = it
            }
        }
    }

}